// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryClient interface {
	// Attempt to register a new user with the provided credentials.
	//
	// If a user with such username already exists, produce an error.
	RegisterNewUser(ctx context.Context, in *UserCredentials, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Attempt to log in as an existing user with the provided credentials.
	//
	// If a matching account is found, return an AuthPair for subscriptions.
	// If no such user exists or the password is incorrect, return an error.
	LoginAsUser(ctx context.Context, in *UserCredentials, opts ...grpc.CallOption) (*AuthPair, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) RegisterNewUser(ctx context.Context, in *UserCredentials, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tcp_chat.Registry/RegisterNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) LoginAsUser(ctx context.Context, in *UserCredentials, opts ...grpc.CallOption) (*AuthPair, error) {
	out := new(AuthPair)
	err := c.cc.Invoke(ctx, "/tcp_chat.Registry/LoginAsUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
// All implementations must embed UnimplementedRegistryServer
// for forward compatibility
type RegistryServer interface {
	// Attempt to register a new user with the provided credentials.
	//
	// If a user with such username already exists, produce an error.
	RegisterNewUser(context.Context, *UserCredentials) (*emptypb.Empty, error)
	// Attempt to log in as an existing user with the provided credentials.
	//
	// If a matching account is found, return an AuthPair for subscriptions.
	// If no such user exists or the password is incorrect, return an error.
	LoginAsUser(context.Context, *UserCredentials) (*AuthPair, error)
	mustEmbedUnimplementedRegistryServer()
}

// UnimplementedRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (UnimplementedRegistryServer) RegisterNewUser(context.Context, *UserCredentials) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewUser not implemented")
}
func (UnimplementedRegistryServer) LoginAsUser(context.Context, *UserCredentials) (*AuthPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAsUser not implemented")
}
func (UnimplementedRegistryServer) mustEmbedUnimplementedRegistryServer() {}

// UnsafeRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServer will
// result in compilation errors.
type UnsafeRegistryServer interface {
	mustEmbedUnimplementedRegistryServer()
}

func RegisterRegistryServer(s grpc.ServiceRegistrar, srv RegistryServer) {
	s.RegisterService(&Registry_ServiceDesc, srv)
}

func _Registry_RegisterNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).RegisterNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcp_chat.Registry/RegisterNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).RegisterNewUser(ctx, req.(*UserCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_LoginAsUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).LoginAsUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcp_chat.Registry/LoginAsUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).LoginAsUser(ctx, req.(*UserCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

// Registry_ServiceDesc is the grpc.ServiceDesc for Registry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tcp_chat.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNewUser",
			Handler:    _Registry_RegisterNewUser_Handler,
		},
		{
			MethodName: "LoginAsUser",
			Handler:    _Registry_LoginAsUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	// Look up a user account by username or UUID.
	LookupUser(ctx context.Context, in *UserLookupRequest, opts ...grpc.CallOption) (*User, error)
	// Look up a room by UUID.
	LookupRoom(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*ServersideRoom, error)
	// List all rooms the currently logged in user is a member of.
	ListRooms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RoomList, error)
	// List all messages in a certain room.
	ListMessages(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*MessageList, error)
	// Send a new message to a room.
	//
	// The sent message will be mirrored to all clients with a running
	// SubscribeToRoom handle (if it has the same room UUID), including
	// the sender of the message.
	SendMessage(ctx context.Context, in *ClientsideMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Create a new room with however many users.
	CreateRoom(ctx context.Context, in *ClientsideRoom, opts ...grpc.CallOption) (*UUID, error)
	// Create a new chat (1x1 room) with a user.
	CreateRoomWithUser(ctx context.Context, in *RoomWithUserCreationRequest, opts ...grpc.CallOption) (*UUID, error)
	// Subscribe to events inside a room.
	//
	// This RPC will yield any new messages that are sent to the provided room,
	// along with special events when another user joins or leaves the room.
	SubscribeToRoom(ctx context.Context, in *UUID, opts ...grpc.CallOption) (Chat_SubscribeToRoomClient, error)
	// Subscribe to personal events.
	//
	// This RPC will yield event when the currently logged in user gets added
	// to a room he's not a member of or kicked out of a room.
	SubscribeToUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Chat_SubscribeToUserClient, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) LookupUser(ctx context.Context, in *UserLookupRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/tcp_chat.Chat/LookupUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) LookupRoom(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*ServersideRoom, error) {
	out := new(ServersideRoom)
	err := c.cc.Invoke(ctx, "/tcp_chat.Chat/LookupRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ListRooms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RoomList, error) {
	out := new(RoomList)
	err := c.cc.Invoke(ctx, "/tcp_chat.Chat/ListRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ListMessages(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*MessageList, error) {
	out := new(MessageList)
	err := c.cc.Invoke(ctx, "/tcp_chat.Chat/ListMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SendMessage(ctx context.Context, in *ClientsideMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tcp_chat.Chat/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CreateRoom(ctx context.Context, in *ClientsideRoom, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/tcp_chat.Chat/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CreateRoomWithUser(ctx context.Context, in *RoomWithUserCreationRequest, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/tcp_chat.Chat/CreateRoomWithUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SubscribeToRoom(ctx context.Context, in *UUID, opts ...grpc.CallOption) (Chat_SubscribeToRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[0], "/tcp_chat.Chat/SubscribeToRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatSubscribeToRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_SubscribeToRoomClient interface {
	Recv() (*ServersideRoomEvent, error)
	grpc.ClientStream
}

type chatSubscribeToRoomClient struct {
	grpc.ClientStream
}

func (x *chatSubscribeToRoomClient) Recv() (*ServersideRoomEvent, error) {
	m := new(ServersideRoomEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) SubscribeToUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Chat_SubscribeToUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[1], "/tcp_chat.Chat/SubscribeToUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatSubscribeToUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_SubscribeToUserClient interface {
	Recv() (*ServersideUserEvent, error)
	grpc.ClientStream
}

type chatSubscribeToUserClient struct {
	grpc.ClientStream
}

func (x *chatSubscribeToUserClient) Recv() (*ServersideUserEvent, error) {
	m := new(ServersideUserEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	// Look up a user account by username or UUID.
	LookupUser(context.Context, *UserLookupRequest) (*User, error)
	// Look up a room by UUID.
	LookupRoom(context.Context, *UUID) (*ServersideRoom, error)
	// List all rooms the currently logged in user is a member of.
	ListRooms(context.Context, *emptypb.Empty) (*RoomList, error)
	// List all messages in a certain room.
	ListMessages(context.Context, *UUID) (*MessageList, error)
	// Send a new message to a room.
	//
	// The sent message will be mirrored to all clients with a running
	// SubscribeToRoom handle (if it has the same room UUID), including
	// the sender of the message.
	SendMessage(context.Context, *ClientsideMessage) (*emptypb.Empty, error)
	// Create a new room with however many users.
	CreateRoom(context.Context, *ClientsideRoom) (*UUID, error)
	// Create a new chat (1x1 room) with a user.
	CreateRoomWithUser(context.Context, *RoomWithUserCreationRequest) (*UUID, error)
	// Subscribe to events inside a room.
	//
	// This RPC will yield any new messages that are sent to the provided room,
	// along with special events when another user joins or leaves the room.
	SubscribeToRoom(*UUID, Chat_SubscribeToRoomServer) error
	// Subscribe to personal events.
	//
	// This RPC will yield event when the currently logged in user gets added
	// to a room he's not a member of or kicked out of a room.
	SubscribeToUser(*emptypb.Empty, Chat_SubscribeToUserServer) error
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) LookupUser(context.Context, *UserLookupRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupUser not implemented")
}
func (UnimplementedChatServer) LookupRoom(context.Context, *UUID) (*ServersideRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupRoom not implemented")
}
func (UnimplementedChatServer) ListRooms(context.Context, *emptypb.Empty) (*RoomList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRooms not implemented")
}
func (UnimplementedChatServer) ListMessages(context.Context, *UUID) (*MessageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedChatServer) SendMessage(context.Context, *ClientsideMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServer) CreateRoom(context.Context, *ClientsideRoom) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedChatServer) CreateRoomWithUser(context.Context, *RoomWithUserCreationRequest) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoomWithUser not implemented")
}
func (UnimplementedChatServer) SubscribeToRoom(*UUID, Chat_SubscribeToRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToRoom not implemented")
}
func (UnimplementedChatServer) SubscribeToUser(*emptypb.Empty, Chat_SubscribeToUserServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToUser not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_LookupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).LookupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcp_chat.Chat/LookupUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).LookupUser(ctx, req.(*UserLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_LookupRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).LookupRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcp_chat.Chat/LookupRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).LookupRoom(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ListRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ListRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcp_chat.Chat/ListRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ListRooms(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcp_chat.Chat/ListMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ListMessages(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientsideMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcp_chat.Chat/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendMessage(ctx, req.(*ClientsideMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientsideRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcp_chat.Chat/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateRoom(ctx, req.(*ClientsideRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CreateRoomWithUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomWithUserCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateRoomWithUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcp_chat.Chat/CreateRoomWithUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateRoomWithUser(ctx, req.(*RoomWithUserCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SubscribeToRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UUID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).SubscribeToRoom(m, &chatSubscribeToRoomServer{stream})
}

type Chat_SubscribeToRoomServer interface {
	Send(*ServersideRoomEvent) error
	grpc.ServerStream
}

type chatSubscribeToRoomServer struct {
	grpc.ServerStream
}

func (x *chatSubscribeToRoomServer) Send(m *ServersideRoomEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Chat_SubscribeToUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).SubscribeToUser(m, &chatSubscribeToUserServer{stream})
}

type Chat_SubscribeToUserServer interface {
	Send(*ServersideUserEvent) error
	grpc.ServerStream
}

type chatSubscribeToUserServer struct {
	grpc.ServerStream
}

func (x *chatSubscribeToUserServer) Send(m *ServersideUserEvent) error {
	return x.ServerStream.SendMsg(m)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tcp_chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupUser",
			Handler:    _Chat_LookupUser_Handler,
		},
		{
			MethodName: "LookupRoom",
			Handler:    _Chat_LookupRoom_Handler,
		},
		{
			MethodName: "ListRooms",
			Handler:    _Chat_ListRooms_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _Chat_ListMessages_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Chat_SendMessage_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _Chat_CreateRoom_Handler,
		},
		{
			MethodName: "CreateRoomWithUser",
			Handler:    _Chat_CreateRoomWithUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToRoom",
			Handler:       _Chat_SubscribeToRoom_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToUser",
			Handler:       _Chat_SubscribeToUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
