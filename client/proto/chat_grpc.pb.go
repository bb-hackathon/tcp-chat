// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomManagerClient is the client API for RoomManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomManagerClient interface {
	Create(ctx context.Context, in *Room, opts ...grpc.CallOption) (*UUID, error)
	Delete(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Nothing, error)
	AddUser(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Nothing, error)
	KickUser(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Nothing, error)
	Send(ctx context.Context, opts ...grpc.CallOption) (RoomManager_SendClient, error)
	Receive(ctx context.Context, in *UUID, opts ...grpc.CallOption) (RoomManager_ReceiveClient, error)
}

type roomManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomManagerClient(cc grpc.ClientConnInterface) RoomManagerClient {
	return &roomManagerClient{cc}
}

func (c *roomManagerClient) Create(ctx context.Context, in *Room, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/tcpchat.RoomManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomManagerClient) Delete(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/tcpchat.RoomManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomManagerClient) AddUser(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/tcpchat.RoomManager/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomManagerClient) KickUser(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/tcpchat.RoomManager/KickUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomManagerClient) Send(ctx context.Context, opts ...grpc.CallOption) (RoomManager_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoomManager_ServiceDesc.Streams[0], "/tcpchat.RoomManager/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomManagerSendClient{stream}
	return x, nil
}

type RoomManager_SendClient interface {
	Send(*Message) error
	CloseAndRecv() (*Nothing, error)
	grpc.ClientStream
}

type roomManagerSendClient struct {
	grpc.ClientStream
}

func (x *roomManagerSendClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roomManagerSendClient) CloseAndRecv() (*Nothing, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Nothing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roomManagerClient) Receive(ctx context.Context, in *UUID, opts ...grpc.CallOption) (RoomManager_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoomManager_ServiceDesc.Streams[1], "/tcpchat.RoomManager/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomManagerReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoomManager_ReceiveClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type roomManagerReceiveClient struct {
	grpc.ClientStream
}

func (x *roomManagerReceiveClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoomManagerServer is the server API for RoomManager service.
// All implementations must embed UnimplementedRoomManagerServer
// for forward compatibility
type RoomManagerServer interface {
	Create(context.Context, *Room) (*UUID, error)
	Delete(context.Context, *UUID) (*Nothing, error)
	AddUser(context.Context, *UUID) (*Nothing, error)
	KickUser(context.Context, *UUID) (*Nothing, error)
	Send(RoomManager_SendServer) error
	Receive(*UUID, RoomManager_ReceiveServer) error
	mustEmbedUnimplementedRoomManagerServer()
}

// UnimplementedRoomManagerServer must be embedded to have forward compatible implementations.
type UnimplementedRoomManagerServer struct {
}

func (UnimplementedRoomManagerServer) Create(context.Context, *Room) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRoomManagerServer) Delete(context.Context, *UUID) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRoomManagerServer) AddUser(context.Context, *UUID) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedRoomManagerServer) KickUser(context.Context, *UUID) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickUser not implemented")
}
func (UnimplementedRoomManagerServer) Send(RoomManager_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedRoomManagerServer) Receive(*UUID, RoomManager_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedRoomManagerServer) mustEmbedUnimplementedRoomManagerServer() {}

// UnsafeRoomManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomManagerServer will
// result in compilation errors.
type UnsafeRoomManagerServer interface {
	mustEmbedUnimplementedRoomManagerServer()
}

func RegisterRoomManagerServer(s grpc.ServiceRegistrar, srv RoomManagerServer) {
	s.RegisterService(&RoomManager_ServiceDesc, srv)
}

func _RoomManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Room)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcpchat.RoomManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomManagerServer).Create(ctx, req.(*Room))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcpchat.RoomManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomManagerServer).Delete(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomManager_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomManagerServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcpchat.RoomManager/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomManagerServer).AddUser(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomManager_KickUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomManagerServer).KickUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcpchat.RoomManager/KickUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomManagerServer).KickUser(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomManager_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoomManagerServer).Send(&roomManagerSendServer{stream})
}

type RoomManager_SendServer interface {
	SendAndClose(*Nothing) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type roomManagerSendServer struct {
	grpc.ServerStream
}

func (x *roomManagerSendServer) SendAndClose(m *Nothing) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roomManagerSendServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RoomManager_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UUID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomManagerServer).Receive(m, &roomManagerReceiveServer{stream})
}

type RoomManager_ReceiveServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type roomManagerReceiveServer struct {
	grpc.ServerStream
}

func (x *roomManagerReceiveServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// RoomManager_ServiceDesc is the grpc.ServiceDesc for RoomManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tcpchat.RoomManager",
	HandlerType: (*RoomManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RoomManager_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RoomManager_Delete_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _RoomManager_AddUser_Handler,
		},
		{
			MethodName: "KickUser",
			Handler:    _RoomManager_KickUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _RoomManager_Send_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Receive",
			Handler:       _RoomManager_Receive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/chat.proto",
}
