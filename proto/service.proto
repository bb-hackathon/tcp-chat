syntax = "proto3";
package tcp_chat;
option go_package = "google.golang.org/bb-hackathon/tcp-chat.git/proto";

import "entities.proto";
import "requests.proto";
import "events.proto";
import "google/protobuf/empty.proto";

// A service for registering new users and logging in as existing ones.
//
// This service does not intercept any requests, but acts as the sole source
// of credentials for all the other services that do. The AuthPair returned by
// the LoginAsUser RPC call contains a user UUID (not sensitive) and AuthToken
// (sensitive!), both of those are needed to authenticate with the server when
// using any other services.
service Registry {
    // Attempt to register a new user with the provided credentials.
    //
    // If a user with such username already exists, produce an error.
    rpc RegisterNewUser (UserCredentials) returns (google.protobuf.Empty);

    // Attempt to log in as an existing user with the provided credentials.
    //
    // If a matching account is found, return an AuthPair for subscriptions.
    // If no such user exists or the password is incorrect, return an error.
    rpc LoginAsUser (UserCredentials) returns (AuthPair);
}

// A service that represents the functional model of the chat application.
//
// This service has an authenticating interceptor, meaning that in order to use
// it in any way, a client must first interact with the Registry service to get
// an AuthPair from it, and embed it in the request's metadata section.
service Chat {
    // Look up a user account by username or UUID.
    rpc LookupUser (UserLookupRequest) returns (User);
    
    rpc SubscribeToRoom (UUID) returns (stream ServersideRoomEvent);
    rpc SendMessage (ClientsideMessage) returns (google.protobuf.Empty);

    rpc SubscribeToUser (google.protobuf.Empty) returns (stream ServersideUserEvent);
    rpc CreateRoom (ClientsideRoom) returns (UUID);
    rpc CreateRoomWithUser (RoomWithUserCreationRequest) returns (UUID);
    // rpc DeleteRoom (UUID) returns (google.protobuf.Empty);

    // rpc MessageEvents (stream ClientsideMessageEvent) returns (stream ServersideMessageEvent);
}

// A stub service that authenticates all requests it receives.
//
// In order to successfully call the TestAuthentication RPC, the request has to
// contain a "user_uuid" and "auth_token" metadata keys, which must contain a
// valid UUID+AuthToken pair of an existing user.
//
// If any of the metadata keys are not present or the contained values do not
// match any of the users' AuthPair, the request is dropped immediately and
// a Status::unauthenticated is returned to the caller.
service AuthenticationTester {
    // RPC with no payload to test the auth interception.
    rpc TestAuthentication (google.protobuf.Empty) returns (google.protobuf.Empty);
}
