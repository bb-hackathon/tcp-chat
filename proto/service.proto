syntax = "proto3";
package tcp_chat;
option go_package = "google.golang.org/bb-hackathon/tcp-chat.git/proto";

import "entities.proto";
import "requests.proto";
import "events.proto";
import "google/protobuf/empty.proto";

// A service for registering new users and logging in as existing ones.
//
// This service does not intercept any requests, but acts as the sole source
// of credentials for all the other services that do. The AuthPair returned by
// the LoginAsUser RPC call contains a user UUID (not sensitive) and AuthToken
// (sensitive!), both of those are needed to authenticate with the server when
// using any other services.
service Registry {
    // Attempt to register a new user with the provided credentials.
    //
    // If a user with such username already exists, produce an error.
    rpc RegisterNewUser (UserCredentials) returns (google.protobuf.Empty);

    // Attempt to log in as an existing user with the provided credentials.
    //
    // If a matching account is found, return an AuthPair for subscriptions.
    // If no such user exists or the password is incorrect, return an error.
    rpc LoginAsUser (UserCredentials) returns (AuthPair);
}

// A service that represents the functional model of the chat application.
//
// This service has an authenticating interceptor, meaning that in order to use
// it in any way, a client must first interact with the Registry service to get
// an AuthPair from it, and embed it in the request's metadata section.
service Chat {
    // Look up a user account by username or UUID.
    rpc LookupUser (UserLookupRequest) returns (User);

    // Look up a room by UUID.
    rpc LookupRoom (UUID) returns (ServersideRoom);

    // List all rooms the currently logged in user is a member of.
    rpc ListRooms (google.protobuf.Empty) returns (RoomList);

    // List all messages in a certain room.
    rpc ListMessages (UUID) returns (MessageList);
    
    // Send a new message to a room.
    //
    // The sent message will be mirrored to all clients with a running
    // SubscribeToRoom handle (if it has the same room UUID), including
    // the sender of the message.
    rpc SendMessage (ClientsideMessage) returns (google.protobuf.Empty);

    // Create a new room with however many users.
    rpc CreateRoom (ClientsideRoom) returns (UUID);

    // Create a new chat (1x1 room) with a user.
    rpc CreateRoomWithUser (RoomWithUserCreationRequest) returns (UUID);

    // Subscribe to events inside a room.
    //
    // This RPC will yield any new messages that are sent to the provided room,
    // along with special events when another user joins or leaves the room.
    rpc SubscribeToRoom (UUID) returns (stream ServersideRoomEvent);

    // Subscribe to personal events.
    //
    // This RPC will yield event when the currently logged in user gets added
    // to a room he's not a member of or kicked out of a room.
    rpc SubscribeToUser (google.protobuf.Empty) returns (stream ServersideUserEvent);

    // Send the room's messages to an LLM for analysis.
    rpc AnalyzeRoom (UUID) returns (RoomAnalysisResponse);
}
