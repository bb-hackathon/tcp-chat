syntax = "proto3";
package tcp_chat;
option go_package = "google.golang.org/bb-hackathon/tcp-chat.git/proto";

import "google/protobuf/timestamp.proto";

// A unique identifier of any entity.
//
// UUIDs should only be created or looked up by the server and sent
// back in a response to a creation/lookup request made by a client.
message UUID {
    string uuid = 1;
}

// An authentication token. WARN: Sensitive!
//
// Is used in par with a UUID (see above and below). The only way to acquire
// the token is to get it back in a response from the LoginAsUser() RPC call.
message AuthToken {
    string token = 1;
}

// A UUID+token pair that's used for user authentication after logging in.
//
// UUIDs are *not* sensitive information (the client throws those around all the
// time while fetching room members, receiving messages, etc.), but the only way
// to acquire a token is to log in as a user (and get it back in the response). 
//
// The same pair (but not in form of a message) should be added to any requests
// to the server as metadata attributes, those will be inspected by the server's
// request interceptor and either allowed in or early-dropped.
message AuthPair {
    UUID user_uuid = 1;
    AuthToken token = 2;
}

// A username+password pair that's used to authenticate with the server.
//
// TODO: Send the password hashed, not in plaintext.
message UserCredentials {
    string username = 1;
    string password = 2;
}

// A user account entity that the client may request from the server.
//
// For example, when the client needs to list the members of the room or display
// the profile of the user you're about to send a message to, it looks up a user
// in the server's database by using the Chat::LookupUser
message User {
    UUID uuid = 1;
    string username = 2;
}

// The entity that the client sends to the server whenever the user sends a new
// message. The UUID of the user is embedded in the requests metadata, so all we
// need to know are the contents of the message and the UUID of the room that
// this message belongs to.
//
// The server's job is to generate a UUID of the message and store it, along
// with a timestamp and the UUID of the sender (see below).
message ClientsideMessage {
    UUID room_uuid = 1;
    string text = 2;
}

message ServersideMessage {
    UUID uuid = 1;
    UUID sender_uuid = 2;
    UUID room_uuid = 3;
    string text = 4;
    google.protobuf.Timestamp timestamp = 5;
}

message ClientsideRoom {
    string name = 1;
    repeated UUID members = 2;
}

message ServersideRoom {
    UUID uuid = 1;
    string name = 2;
    repeated UUID members = 3;
}
